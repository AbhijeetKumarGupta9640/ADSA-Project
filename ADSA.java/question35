import java.util.*;

public class KMostFrequentElements {
    
    public static int[] topKFrequent(int[] nums, int k) {
        // Step 1: Build frequency map
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Use a priority queue (min-heap) to store the top k frequent elements
        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>( 
            (a, b) -> a.getValue() - b.getValue()  // Compare based on frequency
        );

        // Step 3: Add entries to the heap, keeping the heap size at most k
        for (Map.Entry<Integer, Integer> entry : freqMap.entrySet()) {
            minHeap.offer(entry);
            if (minHeap.size() > k) {
                minHeap.poll();  // Remove the element with the smallest frequency
            }
        }

        // Step 4: Extract the k most frequent elements from the heap
        int[] result = new int[k];
        int i = 0;
        while (!minHeap.isEmpty()) {
            result[i++] = minHeap.poll().getKey();
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1,1,1,2,2,3};
        int k = 2;
        int[] result = topKFrequent(nums, k);
        
        System.out.println("The " + k + " most frequent elements are: " + Arrays.toString(result));
    }
}



/*Time Complexity:

Building the frequency map takes O(n) where n is the size of the array, as we iterate through the array once.

Inserting an element into the heap takes O(log k), and since we perform this operation for each unique element in the frequency map, it takes O(n log k).

Thus, the overall time complexity is O(n log k).

Space Complexity:

The space used for the frequency map is O(n) because, in the worst case, every element in the array has a different frequency.

The priority queue (min-heap) stores at most k elements, so its space complexity is O(k).

The overall space complexity is O(n + k).*/