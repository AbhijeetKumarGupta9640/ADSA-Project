public class UniqueDigitNumbers {

    public static int countNumbersWithUniqueDigits(int n) {
        if (n == 0) return 1; // Special case: There's 1 number with 0 digits (the empty number).
        
        int result = 10; // Starting with 1-digit numbers, which are 0-9 (10 numbers).
        int uniqueDigits = 9; // For n = 2, 9 choices for the first digit (1-9).
        int availableDigits = 9; // For n = 2, 9 choices for the second digit (0-9 excluding the first).

        // For each number of digits from 2 to n
        for (int i = 2; i <= n; i++) {
            uniqueDigits *= availableDigits; // Multiply the available choices for the i-th digit
            result += uniqueDigits; // Add to the result
            availableDigits--; // Decrease the available digits for the next digit
        }
        
        return result;
    }

    public static void main(String[] args) {
        int n = 3; // Example input
        int result = countNumbersWithUniqueDigits(n);
        System.out.println("Count of numbers with unique digits for " + n + " digits: " + result);
    }
}


/*Time Complexity:

O(n) — We only iterate through the range from 1 to n to compute the result.

Space Complexity:

O(1) — We are using a constant amount of extra space to store intermediate results.*/