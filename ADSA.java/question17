public class TrappingRainWater {

    public static int trap(int[] height) {
        int n = height.length;
        if (n == 0) return 0;

        // Create arrays to store the left and right max heights
        int[] left_max = new int[n];
        int[] right_max = new int[n];
        int waterTrapped = 0;

        // Fill left_max array
        left_max[0] = height[0];
        for (int i = 1; i < n; i++) {
            left_max[i] = Math.max(left_max[i - 1], height[i]);
        }

        // Fill right_max array
        right_max[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right_max[i] = Math.max(right_max[i + 1], height[i]);
        }

        // Calculate water trapped at each index
        for (int i = 0; i < n; i++) {
            waterTrapped += Math.min(left_max[i], right_max[i]) - height[i];
        }

        return waterTrapped;
    }

    public static void main(String[] args) {
        int[] height = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
        int result = trap(height);
        System.out.println("Total trapped water: " + result);
    }
}


/*Time Complexity:
O(n) — We traverse the array three times: once to fill left_max, once to fill right_max, and once to compute the water trapped.

Space Complexity:
O(n) — We use two auxiliary arrays (left_max and right_max) for storing the maximum heights */