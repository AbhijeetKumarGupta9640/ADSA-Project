import java.util.Scanner;

public class PrefixSumRangeQuery {

    
    public static int[] buildPrefixSum(int[] arr) {
        int n = arr.length;
        int[] prefix = new int[n];
        prefix[0] = arr[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + arr[i];
        }
        return prefix;
    }

    
    public static int rangeSum(int[] prefix, int L, int R) {
        if (L == 0) return prefix[R];
        return prefix[R] - prefix[L - 1];
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        
        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();
        int[] arr = new int[n];

        System.out.println("Enter elements:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        
        int[] prefix = buildPrefixSum(arr);

        
        System.out.print("Enter L (start index): ");
        int L = sc.nextInt();
        System.out.print("Enter R (end index): ");
        int R = sc.nextInt();

        
        int sum = rangeSum(prefix, L, R);
        System.out.println("Sum from index " + L + " to " + R + " = " + sum);
    }
}


/*Time Complexity:
Prefix sum construction: O(n)

Each query: O(1)

Space Complexity:
Prefix sum array: O(n)*/