import java.util.Scanner;

public class MaxSubarraySumK {

    
    public static int maxSumSubarray(int[] arr, int k) {
        int n = arr.length;
        if (n < k) {
            System.out.println("Window size K is larger than the array size.");
            return -1;
        }

        
        int windowSum = 0;
        for (int i = 0; i < k; i++) {
            windowSum += arr[i];
        }

        int maxSum = windowSum;

        
        for (int i = k; i < n; i++) {
            windowSum += arr[i] - arr[i - k]; 
            maxSum = Math.max(maxSum, windowSum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        
        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();
        int[] arr = new int[n];

        System.out.println("Enter array elements:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        
        System.out.print("Enter the window size K: ");
        int k = sc.nextInt();

        
        int result = maxSumSubarray(arr, k);
        if (result != -1) {
            System.out.println("Maximum sum of any subarray of size " + k + " = " + result);
        }
    }
}



/* Time Complexity:
Initial sum of first K elements: O(K)

Sliding the window through the rest: O(n - K)

Total: O(n)

Space Complexity:
O(1) */