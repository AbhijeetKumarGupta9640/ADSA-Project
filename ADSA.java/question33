public class SlidingWindow {
    public static int maxSumSubarray(int[] nums, int k) {
        int n = nums.length;
        if (n < k) return -1; // Edge case

        // Find the sum of the first window
        int windowSum = 0;
        for (int i = 0; i < k; i++) {
            windowSum += nums[i];
        }

        int maxSum = windowSum;
        
        // Slide the window from left to right
        for (int i = k; i < n; i++) {
            windowSum += nums[i] - nums[i - k]; // Add the next element and remove the leftmost element
            maxSum = Math.max(maxSum, windowSum);
        }
        
        return maxSum;
    }

    public static void main(String[] args) {
        int[] nums = {2, 1, 5, 1, 3, 2};
        int k = 3;
        System.out.println("Maximum sum of subarray of size " + k + " is: " + maxSumSubarray(nums, k)); // Output: 9
    }
}


/*Time Complexity: O(n)

The algorithm only passes over the array once, and all updates (addition and subtraction) are constant time operations.

Space Complexity: O(1)

The algorithm only uses a constant amount of extra space, regardless of the input size*/

/* What is the Sliding Window Technique?
The sliding window technique is a method to efficiently solve problems involving arrays or lists, where a window of a fixed size or variable size "slides" over the array, allowing us to keep track of a subset of the elements and solve the problem with optimized time complexity.

The idea is to maintain a window of a specific size (or sometimes variable size) and compute the result for that window. As the window slides over the array, the solution can be updated efficiently by adding and removing only a constant number of elements from the window.

How Does the Sliding Window Work?
Initialization: Start by setting up the window, typically defined by two pointers (usually left and right) and the initial conditions.

Sliding the Window: The window is expanded by moving the right pointer, and it is contracted (or adjusted) by moving the left pointer.

Updating the Result: As the window slides, the solution is updated incrementally based on the newly included/excluded elements.

Stopping Condition: The process continues until the window has covered the entire array.

Applications of Sliding Window in Array Problems
Here are some common array-related problems where the sliding window technique is effective:

1. Finding the Maximum or Minimum in Every Sliding Window of Size k
Problem: Find the maximum value in every window of size k as the window slides from left to right.

Example: For an array nums = [1, 3, -1, -3, 5, 3, 6, 7] and k = 3, the output is [3, 3, 5, 5, 6, 7].

2. Longest Substring Without Repeating Characters
Problem: Given a string, find the length of the longest substring without repeating characters.

Example: For s = "abcabcbb", the output is 3 (substring "abc").

3. Maximum Sum Subarray of Size k
Problem: Find the maximum sum of any subarray of size k in an array.

Example: For arr = [2, 1, 5, 1, 3, 2] and k = 3, the output is 9 (subarray [5, 1, 3]).

4. Longest Substring with At Most k Distinct Characters
Problem: Given a string and an integer k, find the length of the longest substring that contains at most k distinct characters.

Example: For s = "eceba" and k = 2, the output is 3 (substring "ece").

 Algorithm for Sliding Window Technique
Hereâ€™s a general algorithm for solving a problem using the sliding window technique:

Initialize the left pointer, the right pointer, and other variables (e.g., windowSum, maxSum, etc.).

Expand the window by moving the right pointer.

If the window condition (e.g., window size k, sum exceeding a threshold) is violated, contract the window by moving the left pointer.

Update the result as necessary.

Continue until the right pointer reaches the end of the array.*/