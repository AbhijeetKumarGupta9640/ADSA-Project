import java.util.HashSet;
import java.util.Scanner;

public class LongestUniqueSubstring {

    public static int lengthOfLongestSubstring(String s) {
        int maxLen = 0;
        int start = 0;
        HashSet<Character> set = new HashSet<>();

        for (int end = 0; end < s.length(); end++) {
            char currentChar = s.charAt(end);

            while (set.contains(currentChar)) {
                set.remove(s.charAt(start));
                start++;
            }

            set.add(currentChar);
            maxLen = Math.max(maxLen, end - start + 1);
        }

        return maxLen;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input the string
        System.out.print("Enter a string: ");
        String input = sc.nextLine();

        // Find and display the result
        int length = lengthOfLongestSubstring(input);
        System.out.println("Length of longest substring without repeating characters: " + length);
    }
}



/*Time Complexity:
O(n) — each character is visited at most twice (once by end, once by start)

Space Complexity:
O(k) — where k is the size of the character set (typically O(1) for English letters) */