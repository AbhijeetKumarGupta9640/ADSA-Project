class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class IntersectionOfLinkedLists {

    public static ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null) return null;

        ListNode a = headA;
        ListNode b = headB;

        while (a != b) {
            a = (a == null) ? headB : a.next;
            b = (b == null) ? headA : b.next;
        }

        return a; // Can be null or the intersection node
    }

    // Helper to connect two lists at intersection point
    public static void main(String[] args) {
        // Shared part
        ListNode intersect = new ListNode(7);
        intersect.next = new ListNode(9);

        // First List: 1 -> 3 -> 5 -> 7 -> 9
        ListNode headA = new ListNode(1);
        headA.next = new ListNode(3);
        headA.next.next = new ListNode(5);
        headA.next.next.next = intersect;

        // Second List: 2 -> 4 -> 7 -> 9
        ListNode headB = new ListNode(2);
        headB.next = new ListNode(4);
        headB.next.next = intersect;

        ListNode result = getIntersectionNode(headA, headB);

        if (result != null) {
            System.out.println("Intersection at node with value: " + result.val);
        } else {
            System.out.println("No intersection.");
        }
    }
}


/*Time Complexity: O(m + n)
(where m and n are the lengths of the two linked lists)

Space Complexity: O(1)
(no extra space used)

 */